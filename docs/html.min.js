"use strict";var _typeof=typeof Symbol==="function"&&typeof Symbol.iterator==="symbol"?function(obj){return typeof obj}:function(obj){return obj&&typeof Symbol==="function"&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj};var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor)}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor}}();function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function")}}var Parser=function(){function Parser(strings){_classCallCheck(this,Parser);this.values_map=[];for(var _len=arguments.length,values=Array(_len>1?_len-1:0),_key=1;_key<_len;_key++){values[_key-1]=arguments[_key]}this.string=this.concat_string(strings,values)}_createClass(Parser,[{key:"concat_string",// Makes a big string from template literals strings and values, also adds ID-s and pushes {id, value} object to values_map,
// so we can put values to correct places in dom element.
value:function concat_string(strings,values){var _this=this;return strings.map(function(string,index){var value=values[index];var id=_this.UUID;switch(true){case typeof value==="function":// the string part that replaces the ${} inside an element: <div onclick=${myFunc}> => becomes => <div onclick=" `" data-${id}="` ">
string=string.concat("\" data-"+id+"=\"");_this.values_map.push({id:id,value:value});break;case(typeof value==="undefined"?"undefined":_typeof(value))==="object"||value&&value.nodeType===1:// Add placeholder for the list item
string=string+" <template data-"+id+"=\"\"></template>";_this.values_map.push({id:id,value:value});break;case typeof value==="string":string=""+string+(value||"");break;}return string}).reduce(function(prev,current){return prev+current})}// Returns regular dom element
},{key:"place_values",// Adds event listeners and appends dom elements if neccesary
value:function place_values(container){var _this2=this;this.values_map.forEach(function(entry){var element=container.querySelector("[data-"+entry.id+"]");if(!element)throw new Error("Warning: could not match event listener --- could not find element with id "+entry.id+" --- Function must be defined between parentheses for example \"${calledFunction}\"");if(typeof entry.value=="function"){// Find onclick, onmouseover .. etc strings values so we can add event listeners to them.
var event_type=/(on)\w+/g.exec(element.outerHTML)[0].split("on")[1];// Add the event listener to the element
element.addEventListener(event_type,entry.value.bind(_this2));// Remove the on- event, required if we have multiple events on same element
element.removeAttribute("on"+event_type);element.removeAttribute("data-"+entry.id)}else if(_typeof(entry.value)=="object"){// Swap template placeholder with list object
if(!entry.value.children){var fragment=document.createDocumentFragment();entry.value.forEach(function(child){return fragment.appendChild(child)});element.replaceWith(fragment)}else{element.replaceWith(entry.value)}}});// returns the container back with values added.
return container}},{key:"UUID",get:function get(){var S4=function S4(){return((1+Math.random())*65536|0).toString(16).substring(1)};return"p"+(S4()+S4()+"-"+S4())}},{key:"fragment",get:function get(){// create container & place values
var div=document.createElement("div");div.innerHTML=this.string;var placedValues=this.place_values(div).firstElementChild;if(placedValues.tagName.toLowerCase()!=="data-fragment")return placedValues;// create and return the fragment
var fragment=document.createDocumentFragment();while(placedValues.children.length>0){fragment.appendChild(placedValues.children[0])}return fragment}}]);return Parser}();function html(strings){for(var _len2=arguments.length,values=Array(_len2>1?_len2-1:0),_key2=1;_key2<_len2;_key2++){values[_key2-1]=arguments[_key2]}return new(Function.prototype.bind.apply(Parser,[null].concat([strings],values)))().fragment}// Make exportable
//////////////////////////////////////////////////////////////////////////////////////
/* eslint-disable no-undef */// Module exporting
if(typeof module!=="undefined"&&module!==null){module.exports=html;// AMD Modules
}else if(typeof define!=="undefined"&&typeof define==="function"&&define){define(function(){return html})}else{window.html=html}
